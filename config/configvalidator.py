from urllib.parse import urlparse
import aiohttp
import logging
import json

logger = logging.getLogger(__name__)


class ConfigValidator:
    def __init__(self, config_path: str):
        self.config_path = config_path
        self.config_data = self.load_config()

    def load_config(self) -> dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.config_path, "r", encoding="utf-8") as file:
                return json.load(file)
        except FileNotFoundError:
            logging.error(f"‚ùóÔ∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            exit(1)
        except json.JSONDecodeError:
            logging.error(f"‚ùóÔ∏è –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_path}.")
            exit(1)

    async def validate_config(self) -> dict:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:

            await self.validate_required_keys()

            if "threshold" not in self.config_data:
                logging.error("‚ùóÔ∏è –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'threshold' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                exit(1)

            if "wss_url" not in self.config_data:
                logging.error("‚ùóÔ∏è –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç 'wss_url' –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
                exit(1)

            await self.validate_threshold(self.config_data["threshold"])
            await self.validate_wss_url(self.config_data["wss_url"])

            return self.config_data

        except Exception as e:
            logger.error(f"üõë –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

    async def validate_required_keys(self):
        required_keys = [
            "threshold",
            "wss_url"
        ]

        for key in required_keys:
            if key not in self.config_data:
                logging.error(f"‚ùóÔ∏è –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∫–ª—é—á '{key}' –≤ settings.json")
                exit(1)

    @staticmethod
    async def validate_threshold(threshold: float) -> None:

        if not threshold > 0:
            logging.error("‚ùóÔ∏è –û—à–∏–±–∫–∞: –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –º–µ–Ω—å—à–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ! –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ 0.")
            exit(1)

    @staticmethod
    def is_valid_wss_url(url: str) -> bool:
        try:
            parsed = urlparse(url)
            return parsed.scheme in ("wss", "ws") and bool(parsed.netloc)
        except Exception as e:
            print(e)
            return False

    @staticmethod
    async def test_ws_connection(url: str, timeout: int = 5) -> bool:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.ws_connect(url, timeout=timeout) as ws:
                    await ws.close()
                    return True
        except Exception as e:
            print(e)
            return False

    async def validate_wss_url(self, wss_url: str) -> None:

        if not self.is_valid_wss_url(wss_url):
            logging.error("‚ùå URL –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
            exit(1)

        logging.info("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WebSocket...")
        if await self.test_ws_connection(wss_url):
            logging.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.\n")

        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ WebSocket.")
            exit(1)
